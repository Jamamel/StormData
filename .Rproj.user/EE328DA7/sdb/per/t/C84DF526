{
    "contents" : "---\ntitle: \"StormData - Identifying the health & economical impact of severe weather events\"\nauthor: \"Jamamel\"\ndate: \"Thursday, November 20, 2014\"\noutput:\n  html_document:\n    keep_md: yes\n    toc: yes\n---\n\n# Synopsis\n\nThe following analysis aims to assess the impact of sever weather events (e.g. tornadoes, floods) through recorded health & economic damaged observed in the U.S over from 1950 through 2011. The dataset used is the  U.S. National Oceanic and Atmospheric Administration's (NOAA) [storm database](https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2). Recorded fatality, injury,property & crop damage entries across the country are broken down to identify leading events responsible historically for these losses. We present the top types of events to which these damages are associated so that budget allocation in prevention and reaction in disaster management is better allocated.This analysis is meant for the sole purpose of visualizing said distributions and relationships. No models or explicit recommendations are produced, but will hopefully help identify areas where plausible hypothesis can more thouroughly investigated in future endeavours.\n\n# Questions\n\nWe aim to address two specific questions, though other corollary analyses are also presented:\n\n- Across the United States, which types of events are most harmful with respect to population health?\n- Across the United States, which types of events have the greatest economic consequences?\n\n# Data Processing\n\nFor information about the data model, design and analyses performed to produce the storm data used, please refer to:\n\n- [National Weather Service Storm Data Documentation](https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf)\n- [National Climatic Data Center Storm Events FAQ](https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2FNCDC%20Storm%20Events-FAQ%20Page.pdf)\n\nAll required R packages are loaded and data downloaded from the mentioned url and loaded into R\n\n```{r setoptionsinv, results='hide', eval = FALSE}\nlibrary(knitr)\nlibrary(data.table)\nlibrary(lubridate)\nlibrary(magrittr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(scales)\nlibrary(gridExtra)\n```\n\n```{r setoptions, echo = FALSE, results='hide', include=FALSE}\nsuppressWarnings(library(knitr))\nsuppressWarnings(library(data.table))\nsuppressWarnings(library(lubridate))\nsuppressWarnings(library(magrittr))\nsuppressWarnings(library(reshape2))\nsuppressWarnings(library(ggplot2))\nsuppressWarnings(library(grid))\nsuppressWarnings(library(scales))\nsuppressWarnings(library(gridExtra))\nopts_chunk$set(echo = TRUE, results = 'hide')\n```\n\n```{r readdata, results='markup'}\n# create folder to store downloaded data in chosen working directory\ndatadir <- paste(getwd(),'/data',sep = '')\nsuppressWarnings(dir.create(datadir))\n\n# download data and store in data folder\nzipdata <- paste(datadir,'/StormData.csv.bz2',sep = '')\n# download.file('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2',zipdata)\n\n\n# unzip and load downloaded data ---------------------------------------------------------\n# data will be uploaded and assigned to object \"d\" of class data.table\n# data.table allows for data manipulation by reference, avoiding unnecessary copying and\n# memory hoarding of large datasets (like the one in this analysis)\n\n\n# read sample to determine column classes for full upload\nd <- read.csv(bzfile(zipdata),nrows = 5000, header = T,stringsAsFactors = F)\n\ncclass <- sapply(d,class)\ncclass[c('BGN_TIME','END_TIME','F')] <- 'character'\ncclass[cclass %in% 'logical'] <- 'character'\n\n# read full dataset after classes have been identified\n# recode all column names to lower case for ease of use and to match coding standards\nd <- data.table(read.table(bzfile(zipdata),header = T, colClasses = cclass,sep = ',',na.strings = ''))\nsetnames(d, old = colnames(d), new = tolower(colnames(d)))\nstr(d,1)\n```\n\n\nWe then transform beginning & end date & time variables to proper date formats.\n\n```{r recodedate, eval = FALSE}\ndatecols <- c('bgn_date','end_date')\ntimecols <- c('end_date','end_time')\n\nd[,eval(datecols) := lapply(.SD, as.IDate,format = '%m/%d/%Y'), .SDcols = datecols]\nd[,eval(timecols) := lapply(.SD, as.ITime,format = \"%H%M\"), .SDcols = timecols]\nsetkey(d,refnum)\n```\n\n```{r recodedateinv, echo = FALSE,results = 'hide'}\ndatecols <- c('bgn_date','end_date')\ntimecols <- c('end_date','end_time')\n\nd[,eval(datecols) := lapply(.SD, as.IDate,format = '%m/%d/%Y'), .SDcols = datecols]\nd[,eval(timecols) := lapply(.SD, as.ITime,format = \"%H%M\"), .SDcols = timecols]\nsetkey(d,refnum)\n```\n\n\nIn order to translate property and crop damages to numerical values, we must create a look-up table for values *k, m,* & *b* (multipliers for thousands, millions, and billions).\n\n```{r dmgmult, results = 'hide'}\n# we recode to NA crop damage multiplier codes with ambiguous interpretations\n# (!cropdmgexp %in% c('k','m','b'))\nd[,cropdmgexp := tolower(cropdmgexp)]\nd[!cropdmgexp %in% c('k','m','b'),cropdmgexp := NA]\n\n\n# we recode to NA property damage multiplier codes with ambiguous interpretations\n# (!propdmgexp %in% c('k','m','b'))\nd[,propdmgexp := tolower(propdmgexp)]\nd[!propdmgexp %in% c('k','m','b'),propdmgexp := NA]\n\n\ntranstab <- list(list('m',1e+06),\n                 list('k',1e+03),\n                 list('b',1e+09)) %>%\n  rbindlist\n\nsetnames(transtab, old = c('V1','V2'), new = c('code', 'value'))\nsetkey(transtab,code)\ntranstab\n```\n\n```{r dmgmulttab, results='markup', echo = FALSE}\ntranstab\n```\n\nWe then translate these property and crop damage multiplier in our data into numerical values\n\n```{r numericalexps, results='hide'}\n# translsate the crop damage multiplier to numerical by creating the variable numcropexp\n# this is created by looking up the values of cropdmgexp in transtab\nd[,numcropexp := transtab[cropdmgexp,'value', with = F]]\n\n# calculate numeric crop damage (numcropexp * cropdmg)\nd[,crop := (numcropexp * cropdmg)]\n\n# translsate the property damage multiplier to numerical analogously to crop damage\nd[,numpropexp := transtab[propdmgexp,'value', with = F]]\n\n# calculate numeric property damage (numcropexp * cropdmg)\nd[,property := (numpropexp * propdmg)]\n```\n```{r numdmgsummary, results='markup'}\nsummary(d$crop)\nsummary(d$property)\n```\n\n\nOnce these numerical economic variables have been calculated, we write a function that will aggregate and plot economic and health damage separately.\n\nThe input parameters for this function are:\n\n- **d**: loaded storm data.table\n- **damagecols**: character vector with pairs of variables to include in each analysis (e.g. damagecols = c('health', 'fatalities') in health damage case)\n- **damage**: character value with category of analysis (i.e. 'health' or 'economic')\n- **yname**: character value for resulting *y-axis* label in plot\n- **yfrmt**: character value for *y-axis* scale format in plot\n\nThe object returned by said function is a list with 3 elements to it:\n\n- **dt**: resulting data.table after calculation of new metrics\n- **viz**: ggplot2 barchart of selected damage analysis\n- **coverage**: list containing descriptives of % of damage covered in analysis\n\n```{r dmgfun, results='markup'}\ndescribeDmg <- function(d, damagecols, damage, yname, yfrmt){\n  \n  # we create a string to subset our data and extract only those weather events\n  # positive damage (e.g. crop & property damage are > 0 in the economic damage case)\n  subsform <- paste(damagecols[1], ' > 0 & ', damagecols[2],' > 0', sep = '')\n  \n  # create subset data.table with subset string created above\n  dmgdt <- d[eval(parse(text = subsform))]\n  dmgdt[,.N,by = evtype][order(-N),]\n  \n  # re-coding of events into \"event\" variable.\n  # events are changed to lower case and some re-coding/cleaning is applied to clean up records.\n  dmgdt[,event := tolower(evtype)]\n  dmgdt[,.N,by = event][order(-N),]\n  \n  dmgdt[grepl('tornado',event),event := 'tornado']\n  dmgdt[grepl('hurricane',event),event := 'hurricane']\n  dmgdt[grepl('typhoon',event),event := 'hurricane']\n  dmgdt[grepl('winter weather',event),event := 'winter weather']\n  dmgdt[grepl('cold',event),event := 'winter weather']\n  dmgdt[grepl('thunderstorm',event),event := 'thunderstorm']\n  dmgdt[grepl('flood',event),event := 'flood']\n  dmgdt[grepl('heat',event),event := 'heat']\n  dmgdt[grepl('high wind',event),event := 'high wind']\n  \n  dmgdt[event %in% c('wild fires','wild/forest fire'),event := 'wildfire']\n  dmgdt[event == 'rip currents',event := 'rip current']\n  dmgdt[event %in% c('tstm wind'),event := 'thunderstorm']\n  \n  # in order to make visualization easier, damage by event per measure (i.e. 'fatalities' or 'injuries')\n  # is aggregated and ranked. \n  # coverage of events recoded\n  sumsform <- paste('list(sum(', damagecols[1], '), sum(', damagecols[2],'))', sep = '')\n  x <- dmgdt[,eval(parse(text = sumsform)),by = event]\n  x[,eval(parse(text = damage)) := V1 + V2]\n  \n  \n  # for each damage measure (e.g. 'fatality' & 'injury' in health case) we identify the top ten \n  # event types in the ranked/ordered aggregation of total damage by event\n  # coverage % of top ten events in total damage for variable 1\n  \n  coverage  <-  vector('list',4)\n  names(coverage) <- c(damagecols, paste(damagecols,2011,sep = ''))\n  \n  y <- x[order(-V1),]; y\n  coverage[[1]] <- sum(y$V1[1:10])/sum(y$V1)\n  \n  # coverage % of top ten events in total damage for variable 2\n  y <- x[order(-V2),]\n  coverage[[2]] <- sum(y$V2[1:10])/sum(y$V2)\n  \n  # no events with fatalities or injuries have missing beginning date (bgn_date)\n  dmgdt[is.na(bgn_date),.N]\n  \n  # create year variable from beginning date of each event (for binning purposes in plot)\n  library(lubridate)\n  dmgdt[,year := year(bgn_date)]\n  \n  \n  # we perform analogous analysis by damage variable focusing on years 2010 & 2011\n  x2 <- dmgdt[year %in% 2010:2011,eval(parse(text = sumsform)),by = event]\n  x2 <- x2[,damage := V1 + V2][order(-damage),]\n  \n  # coverage % fatalities\n  y2 <- x2[order(-V1),]; y2\n  coverage[[3]] <- sum(y2$V1[1:10])/sum(y2$V1)\n  \n  # coverage % injuries\n  y2 <- x2[order(-V2),]\n  coverage[[4]] <- sum(y2$V2[1:10])/sum(y2$V2)\n  \n  dmgcol1 <- paste('sum(',damagecols[1],')',sep = '')\n  dmgcol2 <- paste('sum(',damagecols[2],')',sep = '')\n  \n  # create tidy dataset (tidyhd0) by subsetting dmgdt across observations relevant to top ten events\n  # then rbind and identify unique observations\n  tidyhd1 <- dmgdt[event %in% dmgdt[,eval(parse(text = dmgcol1)),by = event][order(-V1),][1:10,event],]\n  tidyhd2 <- dmgdt[event %in% dmgdt[,eval(parse(text = dmgcol2)),by = event][order(-V1),][1:10,event],]\n  tidyhd0 <- unique(rbind(tidyhd1,tidyhd2))\n  setkey(tidyhd0,refnum)\n  \n  # we melt our tidy dataset to obtain a better data structure for plotting\n  tidyhd <- melt(tidyhd0,id.vars = c('refnum','event','bgn_date','year'),measure.vars = damagecols)\n  \n  # aggregate damage across variables per year for plotting\n  plothd <- tidyhd[,sum(value), by = c('variable','event','year')]\n  setnames(plothd,'V1','frequency')\n  \n  # for better plotting purposes, bin years into 3-year periods and add bin to plothd\n  year <- plothd$year\n  \n  br <- seq(from = min(year),to = min(year) + floor(diff(range(year))/3)*3 + 3, by = 3)\n  br[length(br)] <- max(year)\n  br <- unique(br)\n  plothd[,year3 := cut(year, br, include.lowest = T)]\n  \n  # Identify top 4 events for each event and recode rest of top 10 to 'other'\n  plothd[!event %in% union(y$event[1:4], y2$event[1:4]),event := 'other']\n  \n  plothd <- plothd[,sum(frequency), by = c('variable','event','year3')]\n  setnames(plothd,'V1','frequency')\n  \n  \n  # plot fatality and injurie timelines, and bars with historics\n  capwords <- function(s, strict = FALSE) {\n    cap <- function(s) paste(toupper(substring(s, 1, 1)),\n                             {s <- substring(s, 2); if(strict) tolower(s) else s},\n                             sep = \"\", collapse = \" \" )\n    sapply(strsplit(s, split = \" \"), cap, USE.NAMES = !is.null(names(s)))\n    }\n  \n  # create damage barchart\n  title <- paste('U.S.',capwords(damage), ' Damage by Event per 3-year Period')\n  p <- ggplot(plothd,aes(x = year3,y = frequency,group = event, fill = event)) +\n    geom_bar(stat = 'identity') +\n    ggtitle(title) +\n    facet_grid(variable ~ ., scales = \"free_y\") +\n    scale_fill_brewer(palette = 'Set2') +\n    scale_x_discrete(name = \"\") +\n    scale_y_continuous(labels = eval(parse(text = yfrmt)), name = yname) +\n    theme(legend.position = \"bottom\",\n          panel.margin = unit(2, \"lines\"),\n          panel.background = element_rect(fill = NA),\n          strip.text.y = element_text(size=14, face=\"bold\"),\n          strip.background = element_blank(),\n          axis.text.x = element_text(angle=90, vjust=0.5, size = 12),\n          axis.ticks.y = element_blank(),\n          plot.title = element_text(face=\"bold\", size = 16),\n          legend.title=element_blank())\n  list(dt = tidyhd0, viz = p, coverage = coverage)\n  }\n```\n\n\n# Results\n\nWe now evaluate and produce the analysis for health and economic damage separately calling the function above.\n\n```{r dmgfuncall, results='markup'}\n# we can then evaluate each damage analysis separately using said function\necodmg <- describeDmg(d,c('crop','property'),'economic', 'value', 'dollar')\nhlthdmg <- describeDmg(d,c('fatalities','injuries'),'health', 'cases', 'comma')\n\n# look at coverage of events selected for analysis and visualization\necodmg$coverage\nhlthdmg$coverage\n```\n\nAfter running the analysis and are happy with the coverage we get for each piece, we now present the results of each of these. We plot fatality & injury damage, and property & crop damage as the sum of these values by 3-year periods across the whole of the U.S.\n\n```{r healthplot, results='markup', fig.height=10}\nhlthdmg$viz\n```\n\n```{r economicplot, results='markup', fig.height=10}\necodmg$viz\n```\n\nFinally, we look at the relationship between health (injuries + fatalities) and economic (crop + property damage) and plot a log-itized scatter of these aggregates by event.\n\n```{r finalplot, results='hide', fig.height = 7}\n# rbind economic & health damage obtained previously\neco <- copy(ecodmg[[1]])\nhlt <- copy(hlthdmg[[1]])\n\nhltmask <- hlt[!refnum %in% eco$refnum,'refnum',with = F]\n\n# calculate total health & economic damages\nx <- rbind(eco,hlt[hltmask,])\nx[,health := fatalities + injuries]\nx[,economic := crop + property]\n\n# apply analogoues re-coding to events identified for plotting consistency\nfinalplotdt  <- x[,lapply(.SD,mean,na.rm = T), .SDcols = c('health','economic'), by = 'event']\n\nfinalplotdt[grepl('tornado',event),event := 'tornado']\nfinalplotdt[grepl('hurricane',event),event := 'hurricane']\nfinalplotdt[grepl('typhoon',event),event := 'hurricane']\nfinalplotdt[grepl('winter weather',event),event := 'winter weather']\nfinalplotdt[grepl('cold',event),event := 'winter weather']\nfinalplotdt[grepl('thunderstorm',event),event := 'thunderstorm']\nfinalplotdt[grepl('flood',event),event := 'flood']\nfinalplotdt[grepl('heat',event),event := 'heat']\nfinalplotdt[grepl('high wind',event),event := 'high wind']\n\nfinalplotdt[event %in% c('wild fires','wild/forest fire'),event := 'wildfire']\nfinalplotdt[event == 'rip currents',event := 'rip current']\nfinalplotdt[event %in% c('tstm wind'),event := 'thunderstorm']\n\n\n# select cases where there both health & economic damage per event\nfinalplotdt <- finalplotdt[health > 0 & economic > 0]\n\n# plot results\np <- ggplot(finalplotdt,aes(x = health, y = economic)) +\n  geom_point(colour = 'red', size = 5) +\n  scale_shape(solid = TRUE) +\n  scale_x_log10() +\n  scale_y_log10() +\n  geom_smooth(stat = 'smooth', method = 'lm') +\n  geom_text(aes(label=event), vjust = -1) +\n  ggtitle('U.S. All-Time Mean Health vs. Economic Damage') +\n  theme(plot.title = element_text(size = 14, lineheight = -1, face=\"bold\", vjust = 1.5),\n        panel.background = element_rect(fill = NA),\n        panel.margin = unit(2, \"lines\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        plot.title = element_text(face=\"bold\", size = 16),\n        legend.title=element_blank(),\n        panel.grid.minor=element_blank(),\n        panel.grid.major=element_blank(),\n        axis.title.x = element_text(face = 'bold', size = 14),\n        axis.title.y = element_text(face = 'bold', size = 14))\n\ng <- arrangeGrob(p, sub = textGrob(\"Note: log10 transofmration applied to both axes - 95% confidence interval.\", x = 0, hjust = -0.1, vjust=-0.5, gp = gpar(fontface = \"italic\", fontsize = 10)))\n\n```\n\n```{r plotlast, results='markup', fig.height = 7, echo=FALSE}\ng\n```\n\nThe analysis therefore yields the following pieces of insight:\n\n1. Tornadoes have historically been responsible for a large number of health damage (injuries & deaths). However, there seems to be a lack of data for these sort of instances prior to 1992, so performing this sort of analysis on a total, historical basis may seem misleading. The roles of floods and heat-related catastrophes may be over-shadowed by such a bias in the data.\n2. Floods and hurricanes are by far historically (and on total, available data) the two types of events most responsible for economic damage.\n3. Note the 3-year binning means the latest range of data (2010-2011) would still include one more year worth of data once it becomes available.\n4. The scatter-plot of average damages per event type reveals the sort of events a government would need to focus on if they were keen to enforce a prevention/reaction policy to deal with each type. Ice storms and hurricanes appear to be serious enough on both dimensions to merit special attention. Events like lightning seem to be of the type that could be addressed with intensive information campaigns as all that needs to be addressed is the impact on health.\n\n# References\n\nGitHub link for all code relating to this analysis: [StormData Github](https://github.com/Jamamel/StormData)\n\n\n# System Setup\n\nFor replication purposes, below is the session info relating to packages required for analysis.\n\n```{r sessioninfo, results = 'markup', echo = FALSE}\nsessionInfo()\n```\n\n",
    "created" : 1416670181506.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2774778438",
    "id" : "C84DF526",
    "lastKnownWriteTime" : 1416750072,
    "path" : "~/GitHub/StormData/README.Rmd",
    "project_path" : "README.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}