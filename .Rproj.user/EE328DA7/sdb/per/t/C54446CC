{
    "contents" : "library(knitr)\nlibrary(RCurl)\n\nlibrary(data.table)\nlibrary(lubridate)\nlibrary(magrittr)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(scales)\nlibrary(gridExtra)\n\n\n# create folder to store downloaded data in chosen working directory\ndatadir <- paste(getwd(),'/data',sep = '')\ndir.create(datadir)\n\n# download data and store in data folder\nzipdata <- paste(datadir,'/StormData.csv.bz2',sep = '')\n# download.file('https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2',zipdata)\n\n\n# unzip and load downloaded data ---------------------------------------------------------\n# data will be uploaded and assigned to object \"d\" of class data.table\n# data.table allows for data manipulation by reference, avoiding unnecessary copying and\n# memory hoarding of large datasets (like the one in this analysis)\n\n\n# read sample to determine column classes for full upload\nd <- read.csv(bzfile(zipdata),nrows = 5000, header = T,stringsAsFactors = F)\ndim(d)\nstr(d,1)\n\ncclass <- sapply(d,class)\ncclass[c('BGN_TIME','END_TIME','F')] <- 'character'\ncclass[cclass %in% 'logical'] <- 'character'\n\nd <- data.table(read.table(bzfile(zipdata),header = T, colClasses = cclass,sep = ',',na.strings = ''))\nsetnames(d, old = colnames(d), new = tolower(colnames(d)))\nstr(d,1)\nsummary(d)\n\n# data cleaning -------------------------------------------------------------------------\n# column class definition =============================\n\n# use lubridate library to assign date classes among others\n\ndatecols <- c('bgn_date','end_date')\ntimecols <- c('end_date','end_time')\n\nd[,eval(datecols) := lapply(.SD, as.IDate,format = '%m/%d/%Y'), .SDcols = datecols]\nd[,eval(timecols) := lapply(.SD, as.ITime,format = \"%H%M\"), .SDcols = timecols]\nsetkey(d,refnum)\n\n# we recode to NA crop damage multiplier codes with ambiguous interpretations\n# (!cropdmgexp %in% c('k','m','b'))\nd[,cropdmgexp := tolower(cropdmgexp)]\nd[!cropdmgexp %in% c('k','m','b'),cropdmgexp := NA]\nd[,.N,by = cropdmgexp]\n\n# we recode to NA property damage multiplier codes with ambiguous interpretations\n# (!propdmgexp %in% c('k','m','b'))\nd[,propdmgexp := tolower(propdmgexp)]\nd[!propdmgexp %in% c('k','m','b'),propdmgexp := NA]\nd[,.N,by = propdmgexp]\n\n\n\ntranstab <- list(list('m',1e+06),\n                 list('k',1e+03),\n                 list('b',1e+09)) %>%\n  rbindlist\n\nsetnames(transtab, old = c('V1','V2'), new = c('code', 'value'))\nsetkey(transtab,code)\n\n# translsate the crop damage multiplier to numerical\nd[,numcropexp := transtab[cropdmgexp,'value', with = F]]\nsummary(d$numcropexp)\n\n# calculate numeric crop damage (numcropexp * cropdmg)\nd[,crop := (numcropexp * cropdmg)]\nsummary(d$crop)\n\n\n\n# translsate the property damage multiplier to numerical\nd[,numpropexp := transtab[propdmgexp,'value', with = F]]\nsummary(d$numpropexp)\n\n# calculate numeric property damage (numcropexp * cropdmg)\nd[,property := (numpropexp * propdmg)]\nsummary(d$property)\n\n\n# begin analysis to determine damage to health -------------------------------------------\n# if damage to health is measured purely by positive counts of fatalities or injuries the dataset\n# is greatly redueced. This means fewer un-tidy event type labels to deal with (easier to identify\n# cleaning patterns for tidying).\n\n\n# begin analysis to determine economic damage -------------------------------------------\n# if damage to health is measured purely by positive counts of fatalities or injuries the dataset\n# is greatly redueced. This means fewer un-tidy event type labels to deal with (easier to identify\n# cleaning patterns for tidying).\n\ndescribeDmg <- function(d, damagecols, damage, yname, yfrmt){\n\n  subsform <- paste(damagecols[1], ' > 0 & ', damagecols[2],' > 0', sep = '')\n\n  dmgdt <- d[eval(parse(text = subsform))]\n  dmgdt[,.N,by = evtype][order(-N),]\n\n  dmgdt[,event := tolower(evtype)]\n  dmgdt[,.N,by = event][order(-N),]\n\n  dmgdt[grepl('tornado',event),event := 'tornado']\n  dmgdt[grepl('hurricane',event),event := 'hurricane']\n  dmgdt[grepl('typhoon',event),event := 'hurricane']\n  dmgdt[grepl('winter weather',event),event := 'winter weather']\n  dmgdt[grepl('cold',event),event := 'winter weather']\n  dmgdt[grepl('thunderstorm',event),event := 'thunderstorm']\n  dmgdt[grepl('flood',event),event := 'flood']\n  dmgdt[grepl('heat',event),event := 'heat']\n  dmgdt[grepl('high wind',event),event := 'high wind']\n\n  dmgdt[event %in% c('wild fires','wild/forest fire'),event := 'wildfire']\n  dmgdt[event == 'rip currents',event := 'rip current']\n  dmgdt[event %in% c('tstm wind'),event := 'thunderstorm']\n\n  # coverage of events recoded\n  sumsform <- paste('list(sum(', damagecols[1], '), sum(', damagecols[2],'))', sep = '')\n  x <- dmgdt[,eval(parse(text = sumsform)),by = event]\n  x[,eval(parse(text = damage)) := V1 + V2]\n\n  # coverage % fatalities\n  y <- x[order(-V1),]; y\n  sum(y$V1[1:10])/sum(y$V1)\n\n  # coverage % injuries\n  sum(y$V2[1:10])/sum(y$V2)\n\n  # no events with fatalities or injuries have missing beginning date (bgn_date)\n  dmgdt[is.na(bgn_date),.N]\n  dmgdt[,year := year(bgn_date)]\n\n\n  # check coverages for years 2010 & 2011\n  x2 <- dmgdt[year %in% 2010:2011,eval(parse(text = sumsform)),by = event]\n  x2 <- x2[,damage := V1 + V2][order(-damage),]\n\n  # coverage % fatalities\n  y2 <- x2[order(-V1),]; y2\n  sum(y2$V1[1:10])/sum(y2$V1)\n\n  # coverage % injuries\n  sum(y2$V2[1:10])/sum(y2$V2)\n\n  dmgcol1 <- paste('sum(',damagecols[1],')',sep = '')\n  dmgcol2 <- paste('sum(',damagecols[2],')',sep = '')\n\n  tidyhd1 <- dmgdt[event %in% dmgdt[,eval(parse(text = dmgcol1)),by = event][order(-V1),][1:10,event],]\n  tidyhd2 <- dmgdt[event %in% dmgdt[,eval(parse(text = dmgcol2)),by = event][order(-V1),][1:10,event],]\n  tidyhd0 <- unique(rbind(tidyhd1,tidyhd2))\n  setkey(tidyhd0,refnum)\n\n\n  library(reshape2)\n  tidyhd <- melt(tidyhd0,id.vars = c('refnum','event','bgn_date','year'),measure.vars = damagecols)\n\n  # calculate total(sum) fatalities and injuries by event per year\n  plothd <- tidyhd[,sum(value), by = c('variable','event','year')]\n  setnames(plothd,'V1','frequency')\n  year <- plothd$year\n\n  br <- seq(from = min(year),to = min(year) + floor(diff(range(year))/3)*3 + 3, by = 3)\n  br[length(br)] <- max(year)\n  br <- unique(br)\n  plothd[,year3 := cut(year, br, include.lowest = T)]\n\n  plothd[!event %in% union(y$event[1:4], y2$event[1:4]),event := 'other']\n\n  plothd <- plothd[,sum(frequency), by = c('variable','event','year3')]\n  setnames(plothd,'V1','frequency')\n\n\n  # plot fatality and injurie timelines, and bars with historics\n\n\n  capwords <- function(s, strict = FALSE) {\n    cap <- function(s) paste(toupper(substring(s, 1, 1)),\n{s <- substring(s, 2); if(strict) tolower(s) else s},\nsep = \"\", collapse = \" \" )\nsapply(strsplit(s, split = \" \"), cap, USE.NAMES = !is.null(names(s)))\n  }\n\ntitle <- paste('U.S.',capwords(damage), ' Damage by Event per 3-year Period')\np <- ggplot(plothd,aes(x = year3,y = frequency,group = event, fill = event)) +\n  geom_bar(stat = 'identity') +\n  ggtitle(title) +\n  facet_grid(variable ~ ., scales = \"free_y\") +\n  scale_fill_brewer(palette = 'Set2') +\n  scale_x_discrete(name = \"\") +\n  scale_y_continuous(labels = eval(parse(text = yfrmt)), name = yname) +\n  theme(legend.position = \"bottom\",\n        panel.margin = unit(2, \"lines\"),\n        panel.background = element_rect(fill = NA),\n        strip.text.y = element_text(size=14, face=\"bold\"),\n        strip.background = element_blank(),\n        axis.text.x = element_text(angle=90, vjust=0.5, size = 12),\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(face=\"bold\", size = 16),\n        legend.title=element_blank())\np\nlist(dt = tidyhd0, viz = p)\n\n}\n\necodmg <- describeDmg(d,c('crop','property'),'economic', 'value', 'dollar')\nhlthdmg <- describeDmg(d,c('fatalities','injuries'),'health', 'cases', 'comma')\n\neco <- copy(ecodmg[[1]])\nhlt <- copy(hlthdmg[[1]])\n\nhltmask <- hlt[!refnum %in% eco$refnum,'refnum',with = F]\n\nx <- rbind(eco,hlt[hltmask,])\nx[,health := fatalities + injuries]\nx[,economic := crop + property]\n\nfinalplotdt  <- x[,lapply(.SD,mean,na.rm = T), .SDcols = c('health','economic'), by = 'event']\n\nfinalplotdt[grepl('tornado',event),event := 'tornado']\nfinalplotdt[grepl('hurricane',event),event := 'hurricane']\nfinalplotdt[grepl('typhoon',event),event := 'hurricane']\nfinalplotdt[grepl('winter weather',event),event := 'winter weather']\nfinalplotdt[grepl('cold',event),event := 'winter weather']\nfinalplotdt[grepl('thunderstorm',event),event := 'thunderstorm']\nfinalplotdt[grepl('flood',event),event := 'flood']\nfinalplotdt[grepl('heat',event),event := 'heat']\nfinalplotdt[grepl('high wind',event),event := 'high wind']\n\nfinalplotdt[event %in% c('wild fires','wild/forest fire'),event := 'wildfire']\nfinalplotdt[event == 'rip currents',event := 'rip current']\nfinalplotdt[event %in% c('tstm wind'),event := 'thunderstorm']\nfinalplotdt <- finalplotdt[health > 0 & economic > 0]\n# finalplotdt <- x[health > 0 & economic > 0]\n\n\np <- ggplot(finalplotdt,aes(x = health, y = economic)) +\n  geom_point(colour = 'red', size = 5) +\n  scale_shape(solid = TRUE) +\n  scale_x_log10() +\n  scale_y_log10() +\n  geom_smooth(stat = 'smooth', method = 'lm') +\n  geom_text(aes(label=event), vjust = -1) +\n  ggtitle('U.S. All-Time Mean Health vs. Economic Damage') +\n  theme(plot.title = element_text(size = 14, lineheight = -1, face=\"bold\", vjust = 1.5),\n        panel.background = element_rect(fill = NA),\n        panel.margin = unit(2, \"lines\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        plot.title = element_text(face=\"bold\", size = 16),\n        legend.title=element_blank(),\n        panel.grid.minor=element_blank(),\n        panel.grid.major=element_blank(),\n        axis.title.x = element_text(face = 'bold', size = 14),\n        axis.title.y = element_text(face = 'bold', size = 14))\n\ng <- arrangeGrob(p, sub = textGrob(\"Note: log10 transofmration applied to both axes - 95% confidence interval.\", x = 0, hjust = -0.1, vjust=-0.5, gp = gpar(fontface = \"italic\", fontsize = 10)))\n# ggsave(\"/Users/Alan/Desktop/plot_grid_extra.png\", g)\n\n\nlibrary(knitr)\nknit2html('README.Rmd')\nbrowseURL('README.html')\n",
    "created" : 1416670097442.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3640182297",
    "id" : "C54446CC",
    "lastKnownWriteTime" : 1416747176,
    "path" : "~/GitHub/StormData/Analysis.R",
    "project_path" : "Analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}